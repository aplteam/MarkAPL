 R←Test_InLine_005(stopFlag batchFlag);⎕TRAP;ns;md;expected;res
⍝ Test in-line mark-up; here `` <==> in-line code
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 R←∆Failed

 md←⊂'This: ```` is a back-tick'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This: <code>`</code> is a back-tick</p>'
 →PassesIf expected≡↑ns.html

 md←⊂'This is a paragraph with `{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}` APL code in it.'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This is a paragraph with <code>{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}</code> APL code in it.</p>'
 →PassesIf expected≡↑ns.html

 md←⊂'Enclose in-line code with two ``` (back-tick) characters'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>Enclose in-line code with two <code>` (back-tick) characters</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'This:`` `⍴⍴array` ``is code and `(+/)÷⍴,⍵`'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This:<code></code> <code>⍴⍴array</code> <code></code>is code and <code>(+/)÷⍴,⍵</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'This:`` `⍴⍴array` ``is code and this: `(+/)÷⍴,⍵` as well.'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This:<code></code> <code>⍴⍴array</code> <code></code>is code and this: <code>(+/)÷⍴,⍵</code> as well.</p>'
 →PassesIf expected≡↑ns.html

 md←⊂'``⊃⍉↓``'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p><code></code>⊃⍉↓<code></code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'`` ` ``'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p><code></code> <code> `</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'`` ` ``.'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p><code></code> <code> `.</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'    ```'          ⍝ The 4 spaces are required: less spaces start a code block!
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p><code>`</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'```.'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p><code>`.</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'This is a back-tick (\`) and this is code: `{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}`'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This is a back-tick (`) and this is code: <code>{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}</code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'These are three back-ticks (\`\`\`) and this is code: `{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}` and one more:`'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>These are three back-ticks (```) and this is code: <code>{{⍵/⍨2=+⌿0=⍵∘.|⍵}⍳⍵}</code> and one more:<code></code></p>'
 →PassesIf expected≡↑ns.html

 md←⊂'This is a backslash between code: `\`.'
 ns←##.MarkAPL.Init''md
 ns←##.MarkAPL.Process ns
 expected←'<p>This is a backslash between code: <code>\</code>.</p>'
 →PassesIf expected≡↑ns.html

 R←∆OK

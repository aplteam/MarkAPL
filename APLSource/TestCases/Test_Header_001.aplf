 R←Test_Header_001(stopFlag batchFlag);⎕TRAP;m;parms;ns;buffer;expected
⍝ Test headers ("#" syntax only).
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 R←T._Failed

 parms←MarkAPL.CreateParms
 m←'# Level 1' '## Level 2' '### Level 3' '#### Level 4' '##### Level 5' '###### Level 6'
 ns←MarkAPL.Init parms m
 ns←MarkAPL.Process ns
 expected←{⍵{'<h',⍵,' data-id="[^"]+">',({⍵↓⍨1+⍵⍳' '}⍺),'</h',⍵,'>'}¨⍕¨1+⍳⍴⍵}m
 →T.PassesIf∧/expected{0=⊃⍺ ⎕S 0⊣⍵}¨ns.html/⍨'<h'∘{⍺≡(⍴,⍺)↑⍵}¨ns.html
 buffer←ns.html/⍨'<a '∘{⍺≡(≢⍺)↑⍵}¨ns.html
 →T.FailsIf parms.bookmarkLink≠≢buffer
 →T.FailsIf({{'<a href="#level-',⍵,'" id="level-',⍵,'" class="autoheader_anchor">'}¨⍕¨⍳⍴⍵}buffer)≢buffer

 parms←MarkAPL.CreateParms
 m←'# Level 1' ' ## Level 2' '  ### Level 3' '   #### Level 4' '    ##### Level 5' ⍝ Last one is more than 3 blanks: not a header
 ns←MarkAPL.Init parms m
 ns←MarkAPL.Process ns
 →T.FailsIf 4≠⍴'>Level [0-9]<'⎕S 0⊣ns.html
 →T.FailsIf 2 7 12 17≢'>Level [0-9]<'⎕S 2⊣ns.html

 m←'# Level 1 #' '## Level 2 ##' '### Level 3  #' '#### Level 4         ##############' '##### Level 5' '###### Level 6'
 ns←MarkAPL.Init parms m
 ns←MarkAPL.Process ns

 expected←{⍵{'<h',⍵,' data-id="[^"]+">',({⍵↓⍨-+/∧\(⌽⍵)∊' #'}{⍵↓⍨1+⍵⍳' '}⍺),'</h',⍵,'>'}¨⍕¨⍳⍴⍵}m
 →T.PassesIf∧/expected{0=⊃⍺ ⎕S 0⊣⍵}¨ns.html/⍨'<h'∘{⍺≡(≢⍺)↑⍵}¨ns.html
 →T.FailsIf({{'<a href="#level-',⍵,'" id="level-',⍵,'" class="autoheader_anchor">'}¨⍕¨⍳⍴⍵}buffer)≢buffer

 m←⊂'# em `<em>` <em>'
 ns←MarkAPL.Init parms m
 ns←MarkAPL.Process ns
 →T.PassesIf'<h1 data-id="em">em <code>&lt;em&gt;</code> <em></h1>'≡3⊃ns.html

 m←'# Level 1 #' '## Level 2 ##' '### Level 3  #' '#### Level 4         ##############' '##### Level 5' '###### Level 6'
 parms←MarkAPL.CreateParms
 parms.bookmarkLink←0
 ns←MarkAPL.Init parms m
 ns←MarkAPL.Process ns
 →T.FailsIf 18≠⍴ns.html

 R←T._OK

 r←{opCode}EscapeSpecialChars tx;b;b1;b2;b3;buff;ignore;replaceBy;replace
⍝ ⍵ is typically a line of a Markdown document.
⍝ Code is **not** masked here: we need to exchange "<>&" even in code.
⍝ See `EscapeSpecialCharsOutsideCode` if you don't want this to happen.
⍝ However, don't touch anything between "" inside <> (attribute definitions).
⍝ ⍺ may be 1 or 2 and defaults to 1; that means that "<<" remains untouched.
⍝ If ⍺ is 2 (typically ⍵ is nothing but code) then "&<>" are all converted.
⍝ The opcode allows for faster operation.
 opCode←{0<⎕NC ⍵:⍎⍵ ⋄ 1}'opCode'
 :If 0<≢r←tx
     :If opCode=1
         :If ∨/b←GetMaskForCode tx
             buff←b/tx
             b1←buff='&'
             b2←buff='<'
             b3←buff='>'
             (b1/buff)←⊂'&amp;'
             (b2/buff)←⊂'&lt;'
             (b3/buff)←⊂'&gt;'
             (b/tx)←buff
             tx←⊃,/tx
         :EndIf
         ignore←''
         ignore,←⊂'`[^`]+`'                     ⍝ Code blocks
         ignore,←⊂'<!--.+-->'                   ⍝ SGML comments
         ignore,←⊂'<![CDATA[.+]]>'              ⍝ SGML CDATA section
         ignore,←⊂'\&[a-z][a-z0-9]*;'           ⍝ HTML entities by name
         ignore,←⊂'\&#[0-9][0-9]*;'             ⍝ HTML entities by number
         :If ns.parms.syntaxSugar
             ignore,←⊂'(?<!<)<<(?!<)'
             ignore,←⊂'(?<!>)>>(?!>)'
         :EndIf
         replace←''
         replace,←⊂'(?<!\\)&'                   ⍝ Not "\&" ?
         replace,←⊂'<[a-zA-Z][a-zA-Z0-9]*>'     ⍝ Opening tags pure
         replace,←⊂'<[a-zA-Z][a-zA-Z0-9]* .+>'  ⍝ Opening tags with attributes
         replace,←⊂'</[a-zA-Z][a-zA-Z0-9]*>'    ⍝ Closing tags
         replace,←⊂,'<'
         replace,←⊂,'>'
         replaceBy←(,¨((≢ignore)⍴'&'),'\&amp;' '\0' '\0' '\0' '\&lt;' '\&gt;')
         r←(ignore,replace)⎕R replaceBy⊣tx
     :ElseIf opCode=2
         r←'<'⎕R'\&lt;'⊣'>'⎕R'\&gt;'⊣'\&'⎕R'&amp;'⊣tx
     :Else
         .                                      ⍝ Huh?! Invalid left argument
     :EndIf
 :EndIf
⍝Done
